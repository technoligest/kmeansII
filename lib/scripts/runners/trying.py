import lib.scripts.experiment_perfect_matching as hung

d = [[1.0, 1.0, 1.0, 0.3360552763819096, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 0.8916457286432161, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.9795854271356784, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8888190954773869, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 0.22110552763819097, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9773869346733668, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5339195979899497, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.987751256281407, 1.0, 1.0, 0.9996859296482412, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9566582914572864, 1.0, 1.0, 1.0, 1.0],
     [0.2930276381909548, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9959170854271356, 1.0, 0.9993718592964824, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8787688442211056, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.9550879396984925, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.39384422110552764, 1.0, 0.8941582914572864,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8957286432160804, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 0.9456658291457286, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6375628140703518, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6083542713567839, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 0.353643216080402, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9833542713567839, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9899497487437185, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9224246231155779, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8602386934673367, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.8709170854271356, 1.0, 1.0, 0.6862437185929648, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9883793969849246, 1.0, 1.0, 1.0, 0.9842964824120602, 1.0, 1.0, 1.0,
      0.9990577889447236, 0.9560301507537688, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9827261306532663, 1.0, 1.0, 0.48743718592964824, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 0.9528894472361809, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9334170854271356,
      1.0, 1.0, 1.0, 1.0, 0.592964824120603, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9767587939698492, 1.0, 1.0,
      1.0, 1.0, 1.0, 0.9990577889447236, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 0.5301507537688442, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [0.9239949748743719, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7097989949748744, 1.0, 1.0, 1.0, 0.9745603015075377, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.7666457286432161, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9742462311557789, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.3806532663316583, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9641959798994975, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 0.9689070351758794, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4378140703517588, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9619974874371859, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7503140703517588, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9949748743718593, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.8894472361809045, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7339824120603015],
     [1.0, 1.0, 1.0, 1.0, 1.0, 0.9905778894472361, 1.0, 0.9990577889447236, 1.0, 1.0, 1.0, 0.8621231155778895, 1.0, 1.0,
      0.36023869346733667, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9996859296482412,
      0.9940326633165829],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9469221105527639, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9773869346733668, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.33542713567839194, 1.0, 0.9723618090452262],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9937185929648241, 1.0, 1.0, 1.0, 0.8143844221105527, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.30433417085427134, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 0.9805276381909548, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9707914572864321, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4431532663316583, 1.0, 1.0, 0.9170854271356784,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.628140703517588, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9764447236180904, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.847675879396985, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9591708542713567, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7945979899497487, 1.0, 1.0, 1.0, 1.0, 0.7801507537688442, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9164572864321608, 1.0, 1.0],
     [1.0, 0.9660804020100503, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9934045226130653, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.582286432160804,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 0.9949748743718593, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9981155778894473, 1.0, 1.0, 1.0, 0.9720477386934674, 1.0, 1.0, 0.9930904522613065, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.2452889447236181, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9940326633165829, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.9792713567839196, 1.0, 1.0, 0.7427763819095478, 1.0, 1.0, 1.0, 1.0, 0.6005025125628141,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.5040829145728644, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9993718592964824, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8815954773869347, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9701633165829145, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.3803391959798995, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 0.9842964824120602, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5260678391959799, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.8294597989949749, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8787688442211056, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9946608040201005, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 0.9827261306532663, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9764447236180904, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.960427135678392, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.34139447236180903, 1.0],
     [0.9685929648241206, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9654522613065326, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.9830402010050251, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.23837939698492464, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2864321608040201, 1.0, 1.0, 1.0, 0.9921482412060302, 1.0, 1.0, 1.0,
      0.9915201005025126, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9996859296482412, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9833542713567839, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7452889447236181, 1.0, 1.0, 0.9930904522613065, 1.0, 1.0,
      1.0, 1.0, 0.9974874371859297, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.9007537688442211, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8401381909547738],
     [0.9440954773869347, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.3071608040201005, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9978015075376885, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9729899497487438, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9729899497487438, 1.0, 1.0, 1.0, 1.0, 0.5625, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 0.6083542713567839, 1.0, 1.0, 0.8932160804020101, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9996859296482412, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9591708542713567, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9836683417085427, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9312185929648241, 0.47016331658291455, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 0.9375, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9613693467336684, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.5913944723618091, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9092336683417085, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.9557160804020101, 1.0, 0.5043969849246231, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9808417085427136, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.867462311557789,
      0.9927763819095478, 1.0, 1.0, 1.0, 1.0, 0.32694723618090454, 1.0, 1.0, 1.0],
     [0.9984296482412061, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.9748743718592965, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8300879396984925, 1.0, 0.5882537688442211, 1.0, 1.0,
      0.9739321608040201, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.990891959798995, 1.0, 1.0,
      1.0, 0.980213567839196, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8077889447236181, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5926507537688442, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.996859296482412, 1.0, 0.9579145728643216,
      0.4026381909547739, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9996859296482412, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9849246231155779, 1.0, 1.0, 1.0, 1.0, 0.9987437185929648,
      1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9886934673366834, 1.0, 1.0, 1.0, 0.719535175879397, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9613693467336684,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 0.6821608040201005, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.9227386934673367, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.990891959798995, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 0.9890075376884422, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4020100502512563, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9996859296482412, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9437814070351759, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8737437185929648, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.553391959798995, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9654522613065326, 1.0, 0.9585427135678392],
     [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 0.9896356783919598, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9554020100502513, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.9861809045226131, 1.0, 1.0, 1.0, 1.0, 0.9978015075376885, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9337311557788944, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 0.9842964824120602, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 0.19912060301507536, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5370603015075377, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9685929648241206, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      0.5885678391959799, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 0.29459798994974873, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9952889447236181, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9842964824120602, 1.0],
     [1.0, 0.9996859296482412, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9962311557788944, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 0.15295226130653267, 1.0, 1.0, 1.0, 0.9962311557788944, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 0.989321608040201, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9886934673366834, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]

# minim = min([min(k) for k in d])
# k = [[(i - minim) / 3184 for i in k] for k in d]
# print(k)

# d = [[1,1],[1,1]]
# print(hung.minimum_weight_perfect_matching(d))

#
#
# # import numpy as np
# # import matplotlib.pyplot as plt
# # import experiment_readers as rd
# # # Create data
# #
# # with open("../../inputFiles/DimRedFullDataComplete.txt") as file:
# #   centres = rd.readCentres(file)
# #
# # x = [x for x,y in centres]
# # y = [y for x,y in centres]
# #
# #
# # np.random.seed(0)
# # # example data
# # mu = 100  # mean of distribution
# # sigma = 15  # standard deviation of distribution
# # x = mu + sigma * np.random.randn(437)
# #
# # num_bins = 50
# #
# # fig, ax = plt.subplots()
# #
# # # the histogram of the data
# # n, bins, patches = ax.hist(x, num_bins, normed=1)
# #
# #
# # ax.set_xlabel('Smarts')
# # ax.set_ylabel('Probability density')
# # ax.set_title(r'Histogram of IQ: $\mu=100$, $\sigma=15$')
# #
# # # Tweak spacing to prevent clipping of ylabel
# # fig.tight_layout()
# # plt.show()
#
# import random
# # import numpy as np
# # import matplotlib.pyplot as plt
# #
# # fs = 10  # fontsize
# # pos = [1, 2, 4, 5, 7, 8]
# # data = [np.random.normal(0, std, size=100) for std in pos]
# #
# # fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(6, 6))
# #
# # axes[0, 0].violinplot(data, pos, points=20, widths=0.3,
# #                       showmeans=True, showextrema=True, showmedians=True)
# # axes[0, 0].set_title('Custom violinplot 1', fontsize=fs)
# #
# # axes[0, 1].violinplot(data, pos, points=40, widths=0.5,
# #                       showmeans=True, showextrema=True, showmedians=True,
# #                       bw_method='silverman')
# # axes[0, 1].set_title('Custom violinplot 2', fontsize=fs)
# #
# # axes[0, 2].violinplot(data, pos, points=60, widths=0.7, showmeans=True,
# #                       showextrema=True, showmedians=True, bw_method=0.5)
# # axes[0, 2].set_title('Custom violinplot 3', fontsize=fs)
# #
# # axes[1, 0].violinplot(data, pos, points=80, vert=False, widths=0.7,
# #                       showmeans=True, showextrema=True, showmedians=True)
# # axes[1, 0].set_title('Custom violinplot 4', fontsize=fs)
# #
# # axes[1, 1].violinplot(data, pos, points=100, vert=False, widths=0.9,
# #                       showmeans=True, showextrema=True, showmedians=True,
# #                       bw_method='silverman')
# # axes[1, 1].set_title('Custom violinplot 5', fontsize=fs)
# #
# # axes[1, 2].violinplot(data, pos, points=200, vert=False, widths=1.1,
# #                       showmeans=True, showextrema=True, showmedians=True,
# #                       bw_method=0.5)
# # axes[1, 2].set_title('Custom violinplot 6', fontsize=fs)
# #
# # for ax in axes.flatten():
# #   ax.set_yticklabels([])
# #
# # fig.suptitle("Violin Plotting Examples")
# # fig.subplots_adjust(hspace=0.4)
# # plt.show()
#
#
#
#
#
# import experiment_plotters as pl
# import experiment_readers as rd
# import numpy as np
#
#
# def graphExperimentRuntimesFromFiles(list, names, numSections=10):
#   experimentRunTimes = []
#   for fileName in list:
#     with open(fileName) as file:
#       experimentRunTimes.append(rd.readExperimentRuntimes(file))
#       print(experimentRunTimes[len(experimentRunTimes)-1])
#   i = pl.Plotter(experimentRunTimes, names, numSections,xlabel="ExperimentRuntimes",ylabel="Algorithm")
#   i.comparisonBarPlot()
#
#
# experimentRunTimes = ["../experiments/Experiment Results/kmeans||-DimRedFullDataComplete.txt-test1.txt",
#                       "../experiments/Experiment Results/kmeans++-DimRedFullDataComplete.txt-test1.txt",
#                       "../experiments/Experiment Results/kmeans-DimRedFullDataComplete.txt-test1.txt"]
# names = ["kmeans||", "kmeans++", "kmeans"]
#
# graphExperimentRuntimesFromFiles(experimentRunTimes, names, 10)
# # s=[]
# # for i in range(1):
# #   s.append(np.random.normal(10,10,10000))
# # s=[-2.9825621174896169, -2.1504072978516175, -1.8727277730207839, -1.6603279347846613, -1.5685909271939782, -1.544327908578055, -1.4143527031291994, -1.4047393535737409, -1.2739416210646886, -1.2137230359526303, -1.1854084697079725, -1.0834269550781155, -1.0479990014653133, -1.032355941694201, -0.94929098784659038, -0.91748004352606871, -0.88063560936619856, -0.83236414835002392, -0.82731357999032018, -0.7651651805885632, -0.74122848716881296, -0.71328806652837251, -0.68899435779551821, -0.62423941083094348, -0.60654211246917422, -0.59770780917852162, -0.59372225108232213, -0.56467926957575587, -0.54502280394376046, -0.5378798574265683, -0.50380382033551496, -0.49987450308544534, -0.48412514994303252, -0.46632236327835808, -0.46587499832059776, -0.4514076229809954, -0.43832261873457351, -0.43535478751595436, -0.3860419669362305, -0.29199549240518796, -0.20617690035266534, -0.20510082686588513, -0.20447440173114126, -0.20148376921380989, -0.17986159097849017, -0.17529722390069249, -0.17453939187208603, -0.13460518073918207, -0.10361121112945761, -0.06500116129841943, -0.041886146236693268, -0.025515234833910262, -0.0066973255173395363, 0.0031471030121456235, 0.01192617855519908, 0.06048545956704432, 0.086076720381265334, 0.098387936107619603, 0.12201128242638121, 0.15861231126985356, 0.16413683316115552, 0.18150604322871045, 0.18962594562018997, 0.20171773343814911, 0.2495714623108749, 0.27000723500313945, 0.27292423268454497, 0.27998632202726953, 0.33344673844647715, 0.36081701836252306, 0.39898176699788374, 0.40443585069807841, 0.412777635731717, 0.44004330188776825, 0.46935125843822378, 0.5126810028932185, 0.62837418910270459, 0.6440771819719926, 0.67850656615720151, 0.70956855209993452, 0.73640605716094953, 0.77738465732856143, 0.80057388501254856, 0.80451468583447328, 0.83344211533329604, 0.85615481146064254, 0.92252433971434511, 1.2099382387989082, 1.2373579827168568, 1.290889432400022, 1.3153722173610876, 1.356596516612631, 1.3803531034848353, 1.4518047322229708, 1.4656917810048662, 1.6103076487297532, 1.6840811302700063, 1.7966074532835101, 2.0522379723465045, 2.2004210436288565]
#
# # i= pl.Plotter(s)
# # i.comparisonBubblePlot()
# pl.Plotter.show()
#
# # # a stacked bar plot with errorbars
# # import numpy as np
# # import matplotlib.pyplot as plt
#
#
# # N = 5
# # menMeans = (20, 35, 30, 35, 27)
# # womenMeans = (25, 32, 34, 20, 25)
# # womennMeans = (25, 32, 34, 20, 25)
# # width = 10       # the width of the bars: can also be len(x) sequence
# # ind = [i*20 for i in np.arange(N)]    # the x locations for the groups
# #
# # # p1 = plt.bar(ind, menMeans, width, color='#d62728',)
# # # p2 = plt.bar(ind, womenMeans, width, bottom=menMeans)
# #
# # p1 = plt.bar(ind, menMeans, width, color='#d62728')
# # p2 = plt.bar(ind, womenMeans, width, menMeans)
# #
# # plt.ylabel('Scores')
# # plt.title('Scores by group and gender')
# # plt.xticks(ind, ('G1', 'G2', 'G3', 'G4', 'G5'))
# # plt.yticks(np.arange(-10, 81, 5))
# #
# # plt.legend((p1[0], p2[0]), ('Men', 'Women'))
# #
# # plt.show()
# # rn.plt.show()
#
#
#
# """
# Probability that I exceesd a given value
#
#
# y-value, the number of values of this point or higher
# x-value, is the runtime value
#

import lib.scripts.experiment_serializer as ser

i = ser.deserialize("/Users/yaseralkayale/Documents/classes/kmeansII/lib/scripts/serializedExperiments/kmeans++-DimRedFullDataComplete.txt-test0.txt")
for k in i:
  print(k)
print(len(i))